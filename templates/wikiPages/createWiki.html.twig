{# templates/wikiPages/createWiki.html.twig #}
{% extends 'base.html.twig' %}

{# Wir überschreiben das Template, welches form_errors rendert, damit diese nicht als Liste ausgegeben werden #}
{% form_theme CreateWikiForm 'customError/errors.html.twig' %}

{% block title %}
    Neues Wiki
{% endblock %}


{% block body %}

    {# <p>Email: {{ app.user.email }}</p> #}

    {# start form #}
    {{ form_start(CreateWikiForm) }}


    <div class="container mt-3 border rounded borderDarkMode">
        {# Errors #}
        {% if not CreateWikiForm.vars.valid %}
            <div class="alert alert-danger mt-3" role="alert">
                {{ form_errors(CreateWikiForm.wikiname) }}
                {{ form_errors(CreateWikiForm.imageFile) }}
                {{ form_errors(CreateWikiForm.startseite_md) }}
            </div>
        {% endif %}
        <div class="row my-3">
            <div class="col-sm-3 col-lg-5">
                {{ form_label(CreateWikiForm.wikiname, 'Name des Wikis', {label_attr: {'class': 'form-label'}}) }}

                {{ form_widget(CreateWikiForm.wikiname, {
                    attr: {'class': 'form-control', 'placeholder': '...'}
                }) }}
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-sm-3 col-lg-5">
                {{ form_label(CreateWikiForm.imageFile, 'Wiki Bild', {label_attr: {'class': 'form-label'}}) }}

                {{ form_widget(CreateWikiForm.imageFile, {
                    attr: {'class': 'form-control'}
                }) }}
            </div>
        </div>

        <p class="mb-2">Wiki Einstellungen</p>
        <div class="border rounded p-2 rounded mb-3 borderDarkMode">
            <div class="row mb-3">
                <div class="col-5 col-sm-3">
                    <div class="custom-control custom-switch">
                        {{ form_widget(CreateWikiForm.privat_wiki, {
                            attr: {'class': 'custom-control-input', 'disabled':''}
                        }) }}
                        {{ form_label(CreateWikiForm.privat_wiki, 'Wiki privat schalten', {label_attr: {'class': 'custom-control-label', 'data-bs-toggle':'tooltip', 'title': 'Nur Du, Admins und Collaborator können das Wiki sehen'}}) }}
                    </div>
                </div>
                <div class="col-5 col-sm-3">
                    <div class="custom-control custom-switch">
                        {{ form_widget(CreateWikiForm.everyone_can_see, {
                            attr: {'class': 'custom-control-input', 'checked':''}
                        }) }}
                        {{ form_label(CreateWikiForm.everyone_can_see, 'Öffentlich sichtbar', {label_attr: {'class': 'custom-control-label', 'data-bs-toggle':'tooltip', 'title': 'Jeder kann das Wiki sehen. Falls alle drei Sichtbarkeits Optionen deaktiviert sind, ist das Wiki für alle sichtbar!'}}) }}
                    </div>
                </div>
                <div class="col-5 col-sm-3">
                    <div class="custom-control custom-switch">
                        {{ form_widget(CreateWikiForm.loggedin_can_see, {
                            attr: {'class': 'custom-control-input', 'disabled':'', 'checked':''}
                        }) }}
                        {{ form_label(CreateWikiForm.loggedin_can_see, 'Nur für Nutzer sichtbar', {label_attr: {'class': 'custom-control-label', 'data-bs-toggle':'tooltip', 'title': 'Nur angemeldete Nutzer können das Wiki sehen'}}) }}
                    </div>
                </div>
                <div class="col-5 col-sm-3">
                    <div class="custom-control custom-switch">
                        {{ form_widget(CreateWikiForm.can_user_request_to_join, {
                            attr: {'class': 'custom-control-input'}
                        }) }}
                        {{ form_label(CreateWikiForm.can_user_request_to_join, 'Collaboratoranfragen erlauben', {label_attr: {'class': 'custom-control-label', 'data-bs-toggle':'tooltip', 'title': 'Nutzer können den Collaborator Status anfragen'}}) }}
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-5 col-sm-3">
                    <div class="custom-control custom-switch">
                        {{ form_widget(CreateWikiForm.loggedin_create_posts, {
                            attr: {'class': 'custom-control-input'}
                        }) }}
                        {{ form_label(CreateWikiForm.loggedin_create_posts, 'Nutzer können Beiträge erstellen', {label_attr: {'class': 'custom-control-label', 'data-bs-toggle':'tooltip', 'title': 'Angemeldete Nutzer können Beiträge erstellen'}}) }}
                    </div>
                </div>
                <div class="col-5 col-sm-3">
                    <div class="custom-control custom-switch">
                        {{ form_widget(CreateWikiForm.loggedin_edit_posts, {
                            attr: {'class': 'custom-control-input'}
                        }) }}
                        {{ form_label(CreateWikiForm.loggedin_edit_posts, 'Nutzer können Beiträge bearbeiten', {label_attr: {'class': 'custom-control-label', 'data-bs-toggle':'tooltip', 'title': 'Angemeldete Nutzer können Beiträge bearbeiten'}}) }}
                    </div>
                </div>
                <div class="col-5 col-sm-3">
                    <div class="custom-control custom-switch">
                        {{ form_widget(CreateWikiForm.collab_edit_posts, {
                            attr: {'class': 'custom-control-input'}
                        }) }}
                        {{ form_label(CreateWikiForm.collab_edit_posts, 'Collaborator können Beiträge bearbeiten', {label_attr: {'class': 'custom-control-label', 'data-bs-toggle':'tooltip', 'title': 'Collaborator können Beiträge bearbeiten'}}) }}
                    </div>
                </div>
                <div class="col-5 col-sm-3">
                    <div class="custom-control custom-switch">
                        {{ form_widget(CreateWikiForm.allow_votes, {
                            attr: {'class': 'custom-control-input'}
                        }) }}
                        {{ form_label(CreateWikiForm.allow_votes, 'Bewertung erlauben', {label_attr: {'class': 'custom-control-label', 'data-bs-toggle':'tooltip', 'title': 'Angemeldete Nutzer können das Wiki bewerten'}}) }}
                    </div>
                </div>
            </div>
        </div>
        <p class="mb-2"><span data-bs-toggle="tooltip" title="Themenfelder deinen Wikis (max. 6 Tags wobei ein Tag max. 9 Zeichen lang sein darf)">Tags</span> <span class="text-secondary ml-1 ts-small" id="amount_tags">{% block tagsC %}0{% endblock %}/6</span></p>
        <div class="border rounded p-2 rounded mb-3 tagContainerParent borderDarkMode">
            <div class="tagContainer" id="tagContainerId">
                {% block wikiTags %}
                {% endblock %}
                <input id="hs"/>
            </div>
        </div>
    </div>

    <div class="container-fluid border rounded mt-3 borderDarkMode">
        <div class="row mt-3">
            <div class="col-6">
                <div class="form-group">
                    {{ form_label(CreateWikiForm.startseite_md, 'Wiki Startseite', {label_attr: {'class': 'form-label', 'data-bs-toggle':'tooltip', 'title': 'Hier kannst du die Startseite deines Wikis schreiben.'}}) }}

                    {{ form_widget(CreateWikiForm.startseite_md, {
                        attr: {'class': 'form-control textArea textColor', 'rows': '25'}
                    }) }}
                </div>
            </div>
            <div class="col-6">
                <label class="form-label">Preview</label>
                <div id="preview" class="fakeTextarea border rounded textArea w-100"></div>
            </div>
        </div>

    </div>
    <div class="container">
       <div class="row mt-3">
           <div class="col-2"></div>
           <div class="col-4">
               {% block submitBtn %}
                   <button type="submit" class="btn btn-primary btn-block">Wiki erstellen</button>
               {% endblock %}
           </div>
           <div class="col-4">
               <a class="btn btn-danger btn-block" href="/">Abbrechen</a>
           </div>

       </div>
    </div>
    {# end form #}
    {{ form_end(CreateWikiForm) }}
    {# Submit #}
{% endblock %}


{% block scripts %}
    <script>

        // Aktiviere Tooltips
        let tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        let tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })

        let tags = [] // Tags array muss so früh geladen werden, damit der docReady Block ebenfalls auf das Array zu greifen kann

        // Falls Enter gedrückt wird, wird so das Form nicht abgeschickt
        $(document).on("keydown", ":input:not(textarea)", function(event) {
            return event.key !== "Enter";
        });

        $(document).ready(function() {

            {% block docReady %}{% endblock %}

            let inputField = document.getElementById('create_wiki_form_startseite_md');
            document.getElementById("preview").style.height = inputField.offsetHeight.toString() + "px";
            $("#create_wiki_form_startseite_md").on("input", function () {

                $("#preview").html(DOMPurify.sanitize(marked.parse($("#create_wiki_form_startseite_md").val()), { USE_PROFILES: {html: true} }));

                //Set height of the preview to the same as the input field
                document.getElementById("preview").style.height = inputField.offsetHeight.toString() + "px";
            });
        })

        // Sobald privat_wiki geklickt wird gilt es als privates Wiki
        $('#create_wiki_form_privat_wiki').change(function() {
            if($('#create_wiki_form_privat_wiki').is(':checked')){
                // Wenn checkt, müssen andere Buttons ausgeschaltet und disabled werden!
                $('#create_wiki_form_everyone_can_see').prop("checked", false);
                $('#create_wiki_form_everyone_can_see').prop("disabled", true);

                $('#create_wiki_form_loggedin_can_see').prop("checked", false);
                $('#create_wiki_form_can_user_request_to_join').prop("checked", false);
                $('#create_wiki_form_loggedin_create_posts').prop("checked", false);
                $('#create_wiki_form_loggedin_edit_posts').prop("checked", false);
                $('#create_wiki_form_allow_votes').prop("checked", false);

                $('#create_wiki_form_loggedin_can_see').prop("disabled", true);
                $('#create_wiki_form_can_user_request_to_join').prop("disabled", true);
                $('#create_wiki_form_loggedin_create_posts').prop("disabled", true);
                $('#create_wiki_form_loggedin_edit_posts').prop("disabled", true);
                $('#create_wiki_form_allow_votes').prop("disabled", true);
            }
            else{
                $('#create_wiki_form_everyone_can_see').prop("disabled", false);
                $('#create_wiki_form_loggedin_can_see').prop("disabled", false);
                $('#create_wiki_form_can_user_request_to_join').prop("disabled", false);
                $('#create_wiki_form_loggedin_create_posts').prop("disabled", false);
                $('#create_wiki_form_loggedin_edit_posts').prop("disabled", false);
                $('#create_wiki_form_allow_votes').prop("disabled", false);
            }
        });

        $('#create_wiki_form_everyone_can_see').change(function() {
            if($('#create_wiki_form_everyone_can_see').is(':checked')){
                // Wenn checkt, müssen andere Buttons ausgeschaltet und disabled werden!
                $('#create_wiki_form_privat_wiki').prop("checked", false);
                $('#create_wiki_form_privat_wiki').prop("disabled", true);

                $('#create_wiki_form_loggedin_can_see').prop("checked", true);
                $('#create_wiki_form_loggedin_can_see').prop("disabled", true);
            }
            else{
                $('#create_wiki_form_privat_wiki').prop("disabled", false);
                $('#create_wiki_form_loggedin_can_see').prop("disabled", false);
                $('#create_wiki_form_loggedin_can_see').prop("checked", false);
            }
        });

        $('#create_wiki_form_loggedin_can_see').change(function() {
            if($('#create_wiki_form_loggedin_can_see').is(':checked')){
                // Wenn checkt, müssen andere Buttons ausgeschaltet und disabled werden!
                $('#create_wiki_form_privat_wiki').prop("checked", false);
                $('#create_wiki_form_privat_wiki').prop("disabled", true);
            }
            else{
                $('#create_wiki_form_privat_wiki').prop("disabled", false);
            }
        });

        $('#create_wiki_form_loggedin_edit_posts').change(function() {
            if($('#create_wiki_form_loggedin_edit_posts').is(':checked')){
                // Wenn checkt, müssen andere Buttons ausgeschaltet und disabled werden!
                $('#create_wiki_form_collab_edit_posts').prop("checked", true);
                $('#create_wiki_form_collab_edit_posts').prop("disabled", true);
            }
            else{
                $('#create_wiki_form_collab_edit_posts').prop("disabled", false);
                $('#create_wiki_form_collab_edit_posts').prop("checked", false);
            }
        });





        let tagContainer = document.getElementById('tagContainerId');
        let tagInput = document.querySelector('#hs');

        // Tag input
        function createTag(label, id){
            // Create the entered tag
            let div = document.createElement('div');
            div.setAttribute('class', 'tag');
            div.setAttribute('id', 'tag_' + id);
            let span = document.createElement('span');
            span.innerHTML = label;
            let closeBtn = document.createElement('button');
            closeBtn.setAttribute('onclick', 'removeMe(\"'+ label + '\",' + id +')');
            closeBtn.setAttribute('class', 'btn tagBtn');
            let closeBtnText = document.createElement('i');
            closeBtnText.setAttribute('class', 'bi bi-x');
            closeBtn.appendChild(closeBtnText);

            // Create the form element for the tag
            let form_tag = document.createElement('input');
            form_tag.setAttribute('class', 'form_tag');
            form_tag.setAttribute('id', 'form_tag_' + id);
            form_tag.setAttribute('type', 'text');
            form_tag.setAttribute('name', 'tags[]');
            form_tag.setAttribute('value', label);
            form_tag.setAttribute('hidden', "");

            div.appendChild(span);
            div.appendChild(closeBtn);
            div.appendChild(form_tag);
            return div;
        }

        //<input class="form_tag" type="text" name="tags[]" value="test2" hidden/>

        function clearTags() {
            document.querySelectorAll('.tag').forEach(tag => {
                tag.parentElement.removeChild(tag);
            });
        }


        function addTags(){
            clearTags();
            let counter = 0;
            tags.slice().reverse().forEach(tag => {
                tagContainer.prepend(createTag(tag, counter));
                counter += 1;
            });
            let tagCountDisplay = document.getElementById('amount_tags');
            tagCountDisplay.innerHTML = "" + tags.length + "/6";
        }

        function capitalizeString(string) {
            string = string.replace(/"/g, '&quot;');
            string = string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
            return string.slice(0,9);
        }

        // DONE
        tagInput.addEventListener('keyup', (e) => {
            if (e.key === 'Enter' || e.key === ' ' || e.key === ',') {

                if(tags.length<6){
                    e.target.value.split(' ').forEach(tag => {
                        e.target.value.split(',').forEach(tag => {
                            // Entfernt HTML Tags und fixed escaped " > &
                            tag = DOMPurify.sanitize(tag, { USE_PROFILES: {html: false} })
                            tag = capitalizeString(tag);
                            tag = tag.replace(/ /g, "");
                            tag = tag.replace(/,/g, "");
                            if (tag !== "" && tag!== " " && tag !==","){
                                if(tags.indexOf(tag) === -1) {
                                    tags.push(tag);
                                }
                            }
                        });
                    });
                    addTags();
                }
                tagInput.value = '';
            }
        });

        function removeMe(label, id){
            let index = tags.indexOf(label);
            if (index > -1) {
                tags.splice(index, 1); // 2nd parameter means remove one item only
            }
            clearTags();
            addTags();
        }


    </script>
{% endblock %}
